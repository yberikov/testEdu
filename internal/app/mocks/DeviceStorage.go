// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "homework/internal/device"

	mock "github.com/stretchr/testify/mock"
)

// DeviceStorage is an autogenerated mock type for the DeviceStorage type
type DeviceStorage struct {
	mock.Mock
}

// CreateDevice provides a mock function with given fields: device
func (_m *DeviceStorage) CreateDevice(device models.Device) error {
	ret := _m.Called(device)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceBySerialNum provides a mock function with given fields: serialNum
func (_m *DeviceStorage) DeleteDeviceBySerialNum(serialNum string) error {
	ret := _m.Called(serialNum)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serialNum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceBySerialNum provides a mock function with given fields: serialNum
func (_m *DeviceStorage) GetDeviceBySerialNum(serialNum string) (models.Device, error) {
	ret := _m.Called(serialNum)

	var r0 models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Device, error)); ok {
		return rf(serialNum)
	}
	if rf, ok := ret.Get(0).(func(string) models.Device); ok {
		r0 = rf(serialNum)
	} else {
		r0 = ret.Get(0).(models.Device)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serialNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: device
func (_m *DeviceStorage) UpdateDevice(device models.Device) error {
	ret := _m.Called(device)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeviceStorage creates a new instance of DeviceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceStorage {
	mock := &DeviceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
